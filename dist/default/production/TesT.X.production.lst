

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 11 20:58:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4520 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000B14                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _UART_buffer
    66  000B14  2D                 	db	45
    67  000B15  2D                 	db	45
    68  000B16  2D                 	db	45
    69  000B17  2D                 	db	45
    70  000B18  2D                 	db	45
    71  000B19  2D                 	db	45
    72  000B1A  2D                 	db	45
    73  000B1B  2D                 	db	45
    74  000B1C  2D                 	db	45
    75  000B1D  2D                 	db	45
    76  000B1E  2D                 	db	45
    77  000B1F  2D                 	db	45
    78  000B20  2D                 	db	45
    79  000B21  2D                 	db	45
    80  000B22  2D                 	db	45
    81  000B23  2D                 	db	45
    82  000B24  2D                 	db	45
    83  000B25  2D                 	db	45
    84  000B26  2D                 	db	45
    85  000B27  2D                 	db	45
    86  000B28  2D                 	db	45
    87  000B29  2D                 	db	45
    88  000B2A  2D                 	db	45
    89  000B2B  2D                 	db	45
    90  000B2C  2D                 	db	45
    91  000B2D  2D                 	db	45
    92  000B2E  2D                 	db	45
    93  000B2F  2D                 	db	45
    94  000B30  2D                 	db	45
    95  000B31  2D                 	db	45
    96  000B32  2D                 	db	45
    97  000B33  2D                 	db	45
    98  0000                     _TRISB	set	3987
    99  0000                     _PORTB	set	3969
   100  0000                     _RCREG	set	4014
   101  0000                     _TXREG	set	4013
   102  0000                     _SPBRG	set	4015
   103  0000                     _BAUDCONbits	set	4024
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _TRISCbits	set	3988
   107  0000                     _INTCONbits	set	4082
   108  0000                     _PIE1bits	set	3997
   109  0000                     _TRMT	set	32097
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600  00                 	db	0
   115  000601                     STR_13:
   116  000601  4F                 	db	79	;'O'
   117  000602  46                 	db	70	;'F'
   118  000603  46                 	db	70	;'F'
   119  000604  20                 	db	32
   120  000605  4F                 	db	79	;'O'
   121  000606  4B                 	db	75	;'K'
   122  000607  00                 	db	0
   123  000608                     STR_11:
   124  000608  41                 	db	65	;'A'
   125  000609  4C                 	db	76	;'L'
   126  00060A  4C                 	db	76	;'L'
   127  00060B  20                 	db	32
   128  00060C  4F                 	db	79	;'O'
   129  00060D  4B                 	db	75	;'K'
   130  00060E  00                 	db	0
   131  00060F                     STR_3:
   132  00060F  31                 	db	49	;'1'
   133  000610  20                 	db	32
   134  000611  4F                 	db	79	;'O'
   135  000612  4B                 	db	75	;'K'
   136  000613  00                 	db	0
   137  000614                     STR_5:
   138  000614  32                 	db	50	;'2'
   139  000615  20                 	db	32
   140  000616  4F                 	db	79	;'O'
   141  000617  4B                 	db	75	;'K'
   142  000618  00                 	db	0
   143  000619                     STR_7:
   144  000619  33                 	db	51	;'3'
   145  00061A  20                 	db	32
   146  00061B  4F                 	db	79	;'O'
   147  00061C  4B                 	db	75	;'K'
   148  00061D  00                 	db	0
   149  00061E                     STR_9:
   150  00061E  34                 	db	52	;'4'
   151  00061F  20                 	db	32
   152  000620  4F                 	db	79	;'O'
   153  000621  4B                 	db	75	;'K'
   154  000622  00                 	db	0
   155  000623                     STR_12:
   156  000623  4F                 	db	79	;'O'
   157  000624  46                 	db	70	;'F'
   158  000625  46                 	db	70	;'F'
   159  000626  00                 	db	0
   160  000627                     STR_10:
   161  000627  41                 	db	65	;'A'
   162  000628  4C                 	db	76	;'L'
   163  000629  4C                 	db	76	;'L'
   164  00062A  00                 	db	0
   165  00062B                     STR_1:
   166  00062B  2D                 	db	45
   167  00062C  00                 	db	0
   168  00062D                     STR_2:
   169  00062D  31                 	db	49	;'1'
   170  00062E  00                 	db	0
   171  00062F                     STR_4:
   172  00062F  32                 	db	50	;'2'
   173  000630  00                 	db	0
   174  000631                     STR_6:
   175  000631  33                 	db	51	;'3'
   176  000632  00                 	db	0
   177  000633                     STR_8:
   178  000633  34                 	db	52	;'4'
   179  000634  00                 	db	0
   180                           
   181                           ; #config settings
   182  000635  00                 	db	0	; dummy byte at the end
   183  0000                     
   184                           	psect	cinit
   185  000AA0                     __pcinit:
   186                           	opt stack 0
   187  000AA0                     start_initialization:
   188                           	opt stack 0
   189  000AA0                     __initialization:
   190                           	opt stack 0
   191                           
   192                           ; Initialize objects allocated to COMRAM (32 bytes)
   193                           ; load TBLPTR registers with __pidataCOMRAM
   194  000AA0  0E14               	movlw	low __pidataCOMRAM
   195  000AA2  6EF6               	movwf	tblptrl,c
   196  000AA4  0E0B               	movlw	high __pidataCOMRAM
   197  000AA6  6EF7               	movwf	tblptrh,c
   198  000AA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   199  000AAA  6EF8               	movwf	tblptru,c
   200  000AAC  EE00  F02B         	lfsr	0,__pdataCOMRAM
   201  000AB0  EE10 F020          	lfsr	1,32
   202  000AB4                     copy_data0:
   203  000AB4  0009               	tblrd		*+
   204  000AB6  CFF5 FFEE          	movff	tablat,postinc0
   205  000ABA  50E5               	movf	postdec1,w,c
   206  000ABC  50E1               	movf	fsr1l,w,c
   207  000ABE  E1FA               	bnz	copy_data0
   208  000AC0                     end_of_initialization:
   209                           	opt stack 0
   210  000AC0                     __end_of__initialization:
   211                           	opt stack 0
   212  000AC0  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   213  000AC2  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   214  000AC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   215  000AC6  6EF8               	movwf	tblptru,c
   216  000AC8  0100               	movlb	0
   217  000ACA  EF1B  F003         	goto	_main	;jump to C main() function
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           postdec1	equ	0xFE5
   224                           fsr1l	equ	0xFE1
   225                           
   226                           	psect	dataCOMRAM
   227  00002B                     __pdataCOMRAM:
   228                           	opt stack 0
   229  00002B                     _UART_buffer:
   230                           	opt stack 0
   231  00002B                     	ds	32
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           postdec1	equ	0xFE5
   238                           fsr1l	equ	0xFE1
   239                           
   240                           	psect	cstackCOMRAM
   241  000001                     __pcstackCOMRAM:
   242                           	opt stack 0
   243  000001                     ??_UART_add_buffer:
   244  000001                     
   245                           ; 1 bytes @ 0x0
   246  000001                     	ds	20
   247  000015                     UART_add_buffer@byte_rx:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x14
   251  000015                     	ds	1
   252  000016                     UART_add_buffer@i:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x15
   256  000016                     	ds	2
   257  000018                     ?_strlen:
   258                           	opt stack 0
   259  000018                     ?_strchr:
   260                           	opt stack 0
   261  000018                     UART_Write_byte@data:
   262                           	opt stack 0
   263  000018                     delay_ms@repeat_2:
   264                           	opt stack 0
   265  000018                     UART_clean_buffer@i:
   266                           	opt stack 0
   267  000018                     strchr@ptr:
   268                           	opt stack 0
   269  000018                     strlen@s:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x17
   273  000018                     	ds	1
   274  000019                     UART_Write_Text@text:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x18
   278  000019                     	ds	1
   279  00001A                     ??_strlen:
   280  00001A                     ??_delay_ms:
   281  00001A                     strchr@chr:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x19
   285  00001A                     	ds	1
   286  00001B                     ??_UART_Write_Text:
   287                           
   288                           ; 1 bytes @ 0x1A
   289  00001B                     	ds	1
   290  00001C                     strlen@cp:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x1B
   294  00001C                     	ds	1
   295  00001D                     UART_Write_Text@i:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x1C
   299  00001D                     	ds	1
   300  00001E                     ?_strncmp:
   301                           	opt stack 0
   302  00001E                     strncmp@s1:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x1D
   306  00001E                     	ds	2
   307  000020                     strncmp@s2:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x1F
   311  000020                     	ds	2
   312  000022                     strncmp@len:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x21
   316  000022                     	ds	2
   317  000024                     ??_strncmp:
   318                           
   319                           ; 1 bytes @ 0x23
   320  000024                     	ds	3
   321  000027                     ?_strstr:
   322                           	opt stack 0
   323  000027                     strstr@s1:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x26
   327  000027                     	ds	2
   328  000029                     strstr@s2:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x28
   332  000029                     	ds	2
   333  00002B                     tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           ; 1 bytes @ 0x2A
   342 ;;
   343 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   344 ;;
   345 ;; *************** function _main *****************
   346 ;; Defined at:
   347 ;;		line 15 in file "main.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;		None
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   361 ;;      Params:         0       0       0       0       0       0       0
   362 ;;      Locals:         0       0       0       0       0       0       0
   363 ;;      Temps:          0       0       0       0       0       0       0
   364 ;;      Totals:         0       0       0       0       0       0       0
   365 ;;Total ram usage:        0 bytes
   366 ;; Hardware stack levels required when called:    3
   367 ;; This function calls:
   368 ;;		_UART_Init
   369 ;;		_UART_Write_Text
   370 ;;		_UART_clean_buffer
   371 ;;		_delay_ms
   372 ;;		_strstr
   373 ;; This function is called by:
   374 ;;		Startup code after reset
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text0
   379  000636                     __ptext0:
   380                           	opt stack 0
   381  000636                     _main:
   382                           	opt stack 28
   383                           
   384                           ;main.c: 17: TRISB=0;
   385                           
   386                           ;incstack = 0
   387  000636  0E00               	movlw	0
   388  000638  6E93               	movwf	3987,c	;volatile
   389                           
   390                           ;main.c: 18: PORTB=0;
   391  00063A  0E00               	movlw	0
   392  00063C  6E81               	movwf	3969,c	;volatile
   393                           
   394                           ;main.c: 19: UART_Init();
   395  00063E  EC79  F005         	call	_UART_Init	;wreg free
   396                           
   397                           ;main.c: 20: UART_clean_buffer();
   398  000642  EC19  F005         	call	_UART_clean_buffer	;wreg free
   399                           
   400                           ;main.c: 22: PORTB=0x00;
   401  000646  0E00               	movlw	0
   402  000648  6E81               	movwf	3969,c	;volatile
   403                           
   404                           ;main.c: 23: delay_ms(200);
   405  00064A  0E00               	movlw	0
   406  00064C  6E19               	movwf	delay_ms@repeat_2+1,c
   407  00064E  0EC8               	movlw	200
   408  000650  6E18               	movwf	delay_ms@repeat_2,c
   409  000652  EC67  F005         	call	_delay_ms	;wreg free
   410                           
   411                           ;main.c: 24: PORTB=0x0F;
   412  000656  0E0F               	movlw	15
   413  000658  6E81               	movwf	3969,c	;volatile
   414                           
   415                           ;main.c: 25: delay_ms(200);
   416  00065A  0E00               	movlw	0
   417  00065C  6E19               	movwf	delay_ms@repeat_2+1,c
   418  00065E  0EC8               	movlw	200
   419  000660  6E18               	movwf	delay_ms@repeat_2,c
   420  000662  EC67  F005         	call	_delay_ms	;wreg free
   421                           
   422                           ;main.c: 26: PORTB=0x00;
   423  000666  0E00               	movlw	0
   424  000668  6E81               	movwf	3969,c	;volatile
   425                           
   426                           ;main.c: 27: delay_ms(200);
   427  00066A  0E00               	movlw	0
   428  00066C  6E19               	movwf	delay_ms@repeat_2+1,c
   429  00066E  0EC8               	movlw	200
   430  000670  6E18               	movwf	delay_ms@repeat_2,c
   431  000672  EC67  F005         	call	_delay_ms	;wreg free
   432  000676                     
   433                           ;main.c: 28: PORTB=0x0F;
   434  000676  0E0F               	movlw	15
   435  000678                     L1:
   436  000678  6E81               	movwf	3969,c	;volatile
   437  00067A                     
   438                           ;main.c: 31: if (strstr(UART_buffer, "1") != (0)){
   439  00067A  0E2B               	movlw	low _UART_buffer
   440  00067C  6E27               	movwf	strstr@s1,c
   441  00067E  0E00               	movlw	high _UART_buffer
   442  000680  6E28               	movwf	strstr@s1+1,c
   443  000682  0E2D               	movlw	low STR_2
   444  000684  6E29               	movwf	strstr@s2,c
   445  000686  0E06               	movlw	high STR_2
   446  000688  6E2A               	movwf	strstr@s2+1,c
   447  00068A  EC52  F004         	call	_strstr	;wreg free
   448  00068E  5027               	movf	?_strstr,w,c
   449  000690  1028               	iorwf	?_strstr+1,w,c
   450  000692  B4D8               	btfsc	status,2,c
   451  000694  D00A               	goto	l82
   452                           
   453                           ;main.c: 32: UART_clean_buffer();
   454  000696  EC19  F005         	call	_UART_clean_buffer	;wreg free
   455                           
   456                           ;main.c: 33: UART_Write_Text("1 OK");
   457  00069A  0E0F               	movlw	low STR_3
   458  00069C  6E19               	movwf	UART_Write_Text@text,c
   459  00069E  0E06               	movlw	high STR_3
   460  0006A0  6E1A               	movwf	UART_Write_Text@text+1,c
   461  0006A2  ECD5  F004         	call	_UART_Write_Text	;wreg free
   462                           
   463                           ;main.c: 34: PORTB=0x0E;
   464  0006A6  0E0E               	movlw	14
   465  0006A8  D7E7               	goto	L1
   466  0006AA                     l82:
   467                           
   468                           ;main.c: 36: else if (strstr(UART_buffer, "2") != (0)){
   469  0006AA  0E2B               	movlw	low _UART_buffer
   470  0006AC  6E27               	movwf	strstr@s1,c
   471  0006AE  0E00               	movlw	high _UART_buffer
   472  0006B0  6E28               	movwf	strstr@s1+1,c
   473  0006B2  0E2F               	movlw	low STR_4
   474  0006B4  6E29               	movwf	strstr@s2,c
   475  0006B6  0E06               	movlw	high STR_4
   476  0006B8  6E2A               	movwf	strstr@s2+1,c
   477  0006BA  EC52  F004         	call	_strstr	;wreg free
   478  0006BE  5027               	movf	?_strstr,w,c
   479  0006C0  1028               	iorwf	?_strstr+1,w,c
   480  0006C2  B4D8               	btfsc	status,2,c
   481  0006C4  D00A               	goto	l84
   482                           
   483                           ;main.c: 37: UART_clean_buffer();
   484  0006C6  EC19  F005         	call	_UART_clean_buffer	;wreg free
   485                           
   486                           ;main.c: 38: UART_Write_Text("2 OK");
   487  0006CA  0E14               	movlw	low STR_5
   488  0006CC  6E19               	movwf	UART_Write_Text@text,c
   489  0006CE  0E06               	movlw	high STR_5
   490  0006D0  6E1A               	movwf	UART_Write_Text@text+1,c
   491  0006D2  ECD5  F004         	call	_UART_Write_Text	;wreg free
   492                           
   493                           ;main.c: 39: PORTB=0x0D;
   494  0006D6  0E0D               	movlw	13
   495  0006D8  D7CF               	goto	L1
   496  0006DA                     l84:
   497                           
   498                           ;main.c: 41: else if (strstr(UART_buffer, "3") != (0)){
   499  0006DA  0E2B               	movlw	low _UART_buffer
   500  0006DC  6E27               	movwf	strstr@s1,c
   501  0006DE  0E00               	movlw	high _UART_buffer
   502  0006E0  6E28               	movwf	strstr@s1+1,c
   503  0006E2  0E31               	movlw	low STR_6
   504  0006E4  6E29               	movwf	strstr@s2,c
   505  0006E6  0E06               	movlw	high STR_6
   506  0006E8  6E2A               	movwf	strstr@s2+1,c
   507  0006EA  EC52  F004         	call	_strstr	;wreg free
   508  0006EE  5027               	movf	?_strstr,w,c
   509  0006F0  1028               	iorwf	?_strstr+1,w,c
   510  0006F2  B4D8               	btfsc	status,2,c
   511  0006F4  D00A               	goto	l86
   512                           
   513                           ;main.c: 42: UART_clean_buffer();
   514  0006F6  EC19  F005         	call	_UART_clean_buffer	;wreg free
   515                           
   516                           ;main.c: 43: UART_Write_Text("3 OK");
   517  0006FA  0E19               	movlw	low STR_7
   518  0006FC  6E19               	movwf	UART_Write_Text@text,c
   519  0006FE  0E06               	movlw	high STR_7
   520  000700  6E1A               	movwf	UART_Write_Text@text+1,c
   521  000702  ECD5  F004         	call	_UART_Write_Text	;wreg free
   522                           
   523                           ;main.c: 44: PORTB=0x0B;
   524  000706  0E0B               	movlw	11
   525  000708  D7B7               	goto	L1
   526  00070A                     l86:
   527                           
   528                           ;main.c: 46: else if (strstr(UART_buffer, "4") != (0)){
   529  00070A  0E2B               	movlw	low _UART_buffer
   530  00070C  6E27               	movwf	strstr@s1,c
   531  00070E  0E00               	movlw	high _UART_buffer
   532  000710  6E28               	movwf	strstr@s1+1,c
   533  000712  0E33               	movlw	low STR_8
   534  000714  6E29               	movwf	strstr@s2,c
   535  000716  0E06               	movlw	high STR_8
   536  000718  6E2A               	movwf	strstr@s2+1,c
   537  00071A  EC52  F004         	call	_strstr	;wreg free
   538  00071E  5027               	movf	?_strstr,w,c
   539  000720  1028               	iorwf	?_strstr+1,w,c
   540  000722  B4D8               	btfsc	status,2,c
   541  000724  D00A               	goto	l88
   542                           
   543                           ;main.c: 47: UART_clean_buffer();
   544  000726  EC19  F005         	call	_UART_clean_buffer	;wreg free
   545                           
   546                           ;main.c: 48: UART_Write_Text("4 OK");
   547  00072A  0E1E               	movlw	low STR_9
   548  00072C  6E19               	movwf	UART_Write_Text@text,c
   549  00072E  0E06               	movlw	high STR_9
   550  000730  6E1A               	movwf	UART_Write_Text@text+1,c
   551  000732  ECD5  F004         	call	_UART_Write_Text	;wreg free
   552                           
   553                           ;main.c: 49: PORTB=0x07;
   554  000736  0E07               	movlw	7
   555  000738  D79F               	goto	L1
   556  00073A                     l88:
   557                           
   558                           ;main.c: 51: else if (strstr(UART_buffer, "ALL") != (0)){
   559  00073A  0E2B               	movlw	low _UART_buffer
   560  00073C  6E27               	movwf	strstr@s1,c
   561  00073E  0E00               	movlw	high _UART_buffer
   562  000740  6E28               	movwf	strstr@s1+1,c
   563  000742  0E27               	movlw	low STR_10
   564  000744  6E29               	movwf	strstr@s2,c
   565  000746  0E06               	movlw	high STR_10
   566  000748  6E2A               	movwf	strstr@s2+1,c
   567  00074A  EC52  F004         	call	_strstr	;wreg free
   568  00074E  5027               	movf	?_strstr,w,c
   569  000750  1028               	iorwf	?_strstr+1,w,c
   570  000752  B4D8               	btfsc	status,2,c
   571  000754  D00A               	goto	l90
   572                           
   573                           ;main.c: 52: UART_clean_buffer();
   574  000756  EC19  F005         	call	_UART_clean_buffer	;wreg free
   575                           
   576                           ;main.c: 53: UART_Write_Text("ALL OK");
   577  00075A  0E08               	movlw	low STR_11
   578  00075C  6E19               	movwf	UART_Write_Text@text,c
   579  00075E  0E06               	movlw	high STR_11
   580  000760  6E1A               	movwf	UART_Write_Text@text+1,c
   581  000762  ECD5  F004         	call	_UART_Write_Text	;wreg free
   582                           
   583                           ;main.c: 54: PORTB=0x00;
   584  000766  0E00               	movlw	0
   585  000768  D787               	goto	L1
   586  00076A                     l90:
   587                           
   588                           ;main.c: 56: else if (strstr(UART_buffer, "OFF") != (0)){
   589  00076A  0E2B               	movlw	low _UART_buffer
   590  00076C  6E27               	movwf	strstr@s1,c
   591  00076E  0E00               	movlw	high _UART_buffer
   592  000770  6E28               	movwf	strstr@s1+1,c
   593  000772  0E23               	movlw	low STR_12
   594  000774  6E29               	movwf	strstr@s2,c
   595  000776  0E06               	movlw	high STR_12
   596  000778  6E2A               	movwf	strstr@s2+1,c
   597  00077A  EC52  F004         	call	_strstr	;wreg free
   598  00077E  5027               	movf	?_strstr,w,c
   599  000780  1028               	iorwf	?_strstr+1,w,c
   600  000782  B4D8               	btfsc	status,2,c
   601  000784  D77A               	goto	l81
   602                           
   603                           ;main.c: 57: UART_clean_buffer();
   604  000786  EC19  F005         	call	_UART_clean_buffer	;wreg free
   605                           
   606                           ;main.c: 58: UART_Write_Text("OFF OK");
   607  00078A  0E01               	movlw	low STR_13
   608  00078C  6E19               	movwf	UART_Write_Text@text,c
   609  00078E  0E06               	movlw	high STR_13
   610  000790  6E1A               	movwf	UART_Write_Text@text+1,c
   611  000792  ECD5  F004         	call	_UART_Write_Text	;wreg free
   612  000796  D76F               	goto	L3
   613  000798                     __end_of_main:
   614                           	opt stack 0
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           postinc0	equ	0xFEE
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           status	equ	0xFD8
   623                           
   624 ;; *************** function _strstr *****************
   625 ;; Defined at:
   626 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  s1              2   38[COMRAM] PTR const unsigned char 
   629 ;;		 -> NULL(0), UART_buffer(32), 
   630 ;;  s2              2   40[COMRAM] PTR const unsigned char 
   631 ;;		 -> STR_12(4), STR_10(4), STR_8(2), STR_6(2), 
   632 ;;		 -> STR_4(2), STR_2(2), 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  2   38[COMRAM] PTR unsigned char 
   637 ;; Registers used:
   638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   644 ;;      Params:         4       0       0       0       0       0       0
   645 ;;      Locals:         0       0       0       0       0       0       0
   646 ;;      Temps:          0       0       0       0       0       0       0
   647 ;;      Totals:         4       0       0       0       0       0       0
   648 ;;Total ram usage:        4 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; Hardware stack levels required when called:    2
   651 ;; This function calls:
   652 ;;		_strchr
   653 ;;		_strlen
   654 ;;		_strncmp
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text1
   661  0008A4                     __ptext1:
   662                           	opt stack 0
   663  0008A4                     _strstr:
   664                           	opt stack 28
   665                           
   666                           ;incstack = 0
   667  0008A4  D031               	goto	l649
   668  0008A6  C027  F01E         	movff	strstr@s1,strncmp@s1
   669  0008AA  C028  F01F         	movff	strstr@s1+1,strncmp@s1+1
   670  0008AE  C029  F020         	movff	strstr@s2,strncmp@s2
   671  0008B2  C02A  F021         	movff	strstr@s2+1,strncmp@s2+1
   672  0008B6  C029  F018         	movff	strstr@s2,strlen@s
   673  0008BA  C02A  F019         	movff	strstr@s2+1,strlen@s+1
   674  0008BE  ECFA  F004         	call	_strlen	;wreg free
   675  0008C2  C018  F022         	movff	?_strlen,strncmp@len
   676  0008C6  C019  F023         	movff	?_strlen+1,strncmp@len+1
   677  0008CA  EC94  F004         	call	_strncmp	;wreg free
   678  0008CE  501E               	movf	?_strncmp,w,c
   679  0008D0  101F               	iorwf	?_strncmp+1,w,c
   680  0008D2  A4D8               	btfss	status,2,c
   681  0008D4  D005               	goto	l651
   682  0008D6  C027  F027         	movff	strstr@s1,?_strstr
   683  0008DA  C028  F028         	movff	strstr@s1+1,?_strstr+1
   684  0008DE  0012               	return	
   685  0008E0                     l651:
   686  0008E0  0E01               	movlw	1
   687  0008E2  2427               	addwf	strstr@s1,w,c
   688  0008E4  6E18               	movwf	strchr@ptr,c
   689  0008E6  0E00               	movlw	0
   690  0008E8  2028               	addwfc	strstr@s1+1,w,c
   691  0008EA  6E19               	movwf	strchr@ptr+1,c
   692  0008EC  C029  FFF6         	movff	strstr@s2,tblptrl
   693  0008F0  C02A  FFF7         	movff	strstr@s2+1,tblptrh
   694  0008F4                     	if	0	;tblptru may be non-zero
   695  0008F4                     	endif
   696  0008F4                     	if	0	;tblptru may be non-zero
   697  0008F4                     	endif
   698  0008F4  0008               	tblrd		*
   699  0008F6  50F5               	movf	tablat,w,c
   700  0008F8  6E1A               	movwf	strchr@chr,c
   701  0008FA  6A1B               	clrf	strchr@chr+1,c
   702  0008FC  EC35  F005         	call	_strchr	;wreg free
   703  000900  C018  F027         	movff	?_strchr,strstr@s1
   704  000904  C019  F028         	movff	?_strchr+1,strstr@s1+1
   705  000908                     l649:
   706  000908  5027               	movf	strstr@s1,w,c
   707  00090A  1028               	iorwf	strstr@s1+1,w,c
   708  00090C  B4D8               	btfsc	status,2,c
   709  00090E  D007               	goto	u370
   710  000910  C027  FFD9         	movff	strstr@s1,fsr2l
   711  000914  C028  FFDA         	movff	strstr@s1+1,fsr2h
   712  000918  50DF               	movf	indf2,w,c
   713  00091A  A4D8               	btfss	status,2,c
   714  00091C  D7C4               	goto	l650
   715  00091E                     u370:
   716  00091E  0E00               	movlw	0
   717  000920  6E27               	movwf	?_strstr,c
   718  000922  0E00               	movlw	0
   719  000924  6E28               	movwf	?_strstr+1,c
   720  000926  0012               	return	
   721  000928                     __end_of_strstr:
   722                           	opt stack 0
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           postdec1	equ	0xFE5
   729                           fsr1l	equ	0xFE1
   730                           indf2	equ	0xFDF
   731                           fsr2h	equ	0xFDA
   732                           fsr2l	equ	0xFD9
   733                           status	equ	0xFD8
   734                           
   735 ;; *************** function _strncmp *****************
   736 ;; Defined at:
   737 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  s1              2   29[COMRAM] PTR const unsigned char 
   740 ;;		 -> NULL(0), UART_buffer(32), 
   741 ;;  s2              2   31[COMRAM] PTR const unsigned char 
   742 ;;		 -> STR_12(4), STR_10(4), STR_8(2), STR_6(2), 
   743 ;;		 -> STR_4(2), STR_2(2), 
   744 ;;  len             2   33[COMRAM] unsigned int 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;		None
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2   29[COMRAM] int 
   749 ;; Registers used:
   750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   756 ;;      Params:         6       0       0       0       0       0       0
   757 ;;      Locals:         0       0       0       0       0       0       0
   758 ;;      Temps:          3       0       0       0       0       0       0
   759 ;;      Totals:         9       0       0       0       0       0       0
   760 ;;Total ram usage:        9 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_strstr
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text2
   771  000928                     __ptext2:
   772                           	opt stack 0
   773  000928                     _strncmp:
   774                           	opt stack 28
   775                           
   776                           ;incstack = 0
   777  000928  D033               	goto	l689
   778  00092A                     l957:
   779  00092A  C01E  FFD9         	movff	strncmp@s1,fsr2l
   780  00092E  C01F  FFDA         	movff	strncmp@s1+1,fsr2h
   781  000932  50DF               	movf	indf2,w,c
   782  000934  B4D8               	btfsc	status,2,c
   783  000936  D00F               	goto	u290
   784  000938  C01E  FFD9         	movff	strncmp@s1,fsr2l
   785  00093C  C01F  FFDA         	movff	strncmp@s1+1,fsr2h
   786  000940  50DF               	movf	indf2,w,c
   787  000942  6E24               	movwf	??_strncmp& (0+255),c
   788  000944  C020  FFF6         	movff	strncmp@s2,tblptrl
   789  000948  C021  FFF7         	movff	strncmp@s2+1,tblptrh
   790  00094C                     	if	0	;tblptru may be non-zero
   791  00094C                     	endif
   792  00094C                     	if	0	;tblptru may be non-zero
   793  00094C                     	endif
   794  00094C  0008               	tblrd		*
   795  00094E  50F5               	movf	tablat,w,c
   796  000950  1824               	xorwf	??_strncmp,w,c
   797  000952  B4D8               	btfsc	status,2,c
   798  000954  D019               	goto	l691
   799  000956                     u290:
   800  000956  C020  FFF6         	movff	strncmp@s2,tblptrl
   801  00095A  C021  FFF7         	movff	strncmp@s2+1,tblptrh
   802  00095E                     	if	0	;tblptru may be non-zero
   803  00095E                     	endif
   804  00095E                     	if	0	;tblptru may be non-zero
   805  00095E                     	endif
   806  00095E  0008               	tblrd		*
   807  000960  50F5               	movf	tablat,w,c
   808  000962  6E24               	movwf	??_strncmp& (0+255),c
   809  000964  6A25               	clrf	(??_strncmp+1)& (0+255),c
   810  000966  1E24               	comf	??_strncmp,f,c
   811  000968  1E25               	comf	??_strncmp+1,f,c
   812  00096A  4A24               	infsnz	??_strncmp,f,c
   813  00096C  2A25               	incf	??_strncmp+1,f,c
   814  00096E  C01E  FFD9         	movff	strncmp@s1,fsr2l
   815  000972  C01F  FFDA         	movff	strncmp@s1+1,fsr2h
   816  000976  50DF               	movf	indf2,w,c
   817  000978  6E26               	movwf	(??_strncmp+2)& (0+255),c
   818  00097A  5026               	movf	??_strncmp+2,w,c
   819  00097C  2424               	addwf	??_strncmp,w,c
   820  00097E  6E1E               	movwf	?_strncmp,c
   821  000980  0E00               	movlw	0
   822  000982  2025               	addwfc	??_strncmp+1,w,c
   823  000984  6E1F               	movwf	?_strncmp+1,c
   824  000986  0012               	return	
   825  000988                     l691:
   826  000988  4A1E               	infsnz	strncmp@s1,f,c
   827  00098A  2A1F               	incf	strncmp@s1+1,f,c
   828  00098C  4A20               	infsnz	strncmp@s2,f,c
   829  00098E  2A21               	incf	strncmp@s2+1,f,c
   830  000990                     l689:
   831  000990  0622               	decf	strncmp@len,f,c
   832  000992  A0D8               	btfss	status,0,c
   833  000994  0623               	decf	strncmp@len+1,f,c
   834  000996  2822               	incf	strncmp@len,w,c
   835  000998  E1C8               	bnz	l957
   836  00099A  2823               	incf	strncmp@len+1,w,c
   837  00099C  A4D8               	btfss	status,2,c
   838  00099E  D7C5               	goto	l690
   839  0009A0  0E00               	movlw	0
   840  0009A2  6E1F               	movwf	?_strncmp+1,c
   841  0009A4  0E00               	movlw	0
   842  0009A6  6E1E               	movwf	?_strncmp,c
   843  0009A8  0012               	return	
   844  0009AA                     __end_of_strncmp:
   845                           	opt stack 0
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           postdec1	equ	0xFE5
   852                           fsr1l	equ	0xFE1
   853                           indf2	equ	0xFDF
   854                           fsr2h	equ	0xFDA
   855                           fsr2l	equ	0xFD9
   856                           status	equ	0xFD8
   857                           
   858 ;; *************** function _strlen *****************
   859 ;; Defined at:
   860 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  s               2   23[COMRAM] PTR const unsigned char 
   863 ;;		 -> STR_12(4), STR_10(4), STR_8(2), STR_6(2), 
   864 ;;		 -> STR_4(2), STR_2(2), 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;  cp              2   27[COMRAM] PTR const unsigned char 
   867 ;;		 -> STR_12(4), STR_10(4), STR_8(2), STR_6(2), 
   868 ;;		 -> STR_4(2), STR_2(2), 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2   23[COMRAM] unsigned int 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   878 ;;      Params:         2       0       0       0       0       0       0
   879 ;;      Locals:         2       0       0       0       0       0       0
   880 ;;      Temps:          2       0       0       0       0       0       0
   881 ;;      Totals:         6       0       0       0       0       0       0
   882 ;;Total ram usage:        6 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    1
   885 ;; This function calls:
   886 ;;		Nothing
   887 ;; This function is called by:
   888 ;;		_strstr
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           	psect	text3
   893  0009F4                     __ptext3:
   894                           	opt stack 0
   895  0009F4                     _strlen:
   896                           	opt stack 28
   897                           
   898                           ;incstack = 0
   899  0009F4  C018  F01C         	movff	strlen@s,strlen@cp
   900  0009F8  C019  F01D         	movff	strlen@s+1,strlen@cp+1
   901  0009FC  D002               	goto	l683
   902  0009FE  4A1C               	infsnz	strlen@cp,f,c
   903  000A00  2A1D               	incf	strlen@cp+1,f,c
   904  000A02                     l683:
   905  000A02  C01C  FFF6         	movff	strlen@cp,tblptrl
   906  000A06  C01D  FFF7         	movff	strlen@cp+1,tblptrh
   907  000A0A                     	if	0	;tblptru may be non-zero
   908  000A0A                     	endif
   909  000A0A                     	if	0	;tblptru may be non-zero
   910  000A0A                     	endif
   911  000A0A  0008               	tblrd		*
   912  000A0C  50F5               	movf	tablat,w,c
   913  000A0E  0900               	iorlw	0
   914  000A10  A4D8               	btfss	status,2,c
   915  000A12  D7F5               	goto	l684
   916  000A14  C018  F01A         	movff	strlen@s,??_strlen
   917  000A18  C019  F01B         	movff	strlen@s+1,??_strlen+1
   918  000A1C  1E1A               	comf	??_strlen,f,c
   919  000A1E  1E1B               	comf	??_strlen+1,f,c
   920  000A20  4A1A               	infsnz	??_strlen,f,c
   921  000A22  2A1B               	incf	??_strlen+1,f,c
   922  000A24  501C               	movf	strlen@cp,w,c
   923  000A26  241A               	addwf	??_strlen,w,c
   924  000A28  6E18               	movwf	?_strlen,c
   925  000A2A  501D               	movf	strlen@cp+1,w,c
   926  000A2C  201B               	addwfc	??_strlen+1,w,c
   927  000A2E  6E19               	movwf	?_strlen+1,c
   928  000A30  0012               	return	
   929  000A32                     __end_of_strlen:
   930                           	opt stack 0
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           tblptrl	equ	0xFF6
   934                           tablat	equ	0xFF5
   935                           postinc0	equ	0xFEE
   936                           postdec1	equ	0xFE5
   937                           fsr1l	equ	0xFE1
   938                           indf2	equ	0xFDF
   939                           fsr2h	equ	0xFDA
   940                           fsr2l	equ	0xFD9
   941                           status	equ	0xFD8
   942                           
   943 ;; *************** function _strchr *****************
   944 ;; Defined at:
   945 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  ptr             2   23[COMRAM] PTR const unsigned char 
   948 ;;		 -> NULL(0), UART_buffer(32), 
   949 ;;  chr             2   25[COMRAM] int 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2   23[COMRAM] PTR unsigned char 
   954 ;; Registers used:
   955 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   961 ;;      Params:         4       0       0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0
   963 ;;      Temps:          1       0       0       0       0       0       0
   964 ;;      Totals:         5       0       0       0       0       0       0
   965 ;;Total ram usage:        5 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    1
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_strstr
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text4
   976  000A6A                     __ptext4:
   977                           	opt stack 0
   978  000A6A                     _strchr:
   979                           	opt stack 28
   980                           
   981                           ;incstack = 0
   982  000A6A  C018  FFD9         	movff	strchr@ptr,fsr2l
   983  000A6E  C019  FFDA         	movff	strchr@ptr+1,fsr2h
   984  000A72  501A               	movf	strchr@chr,w,c
   985  000A74  18DE               	xorwf	postinc2,w,c
   986  000A76  A4D8               	btfss	status,2,c
   987  000A78  D005               	goto	l678
   988  000A7A  C018  F018         	movff	strchr@ptr,?_strchr
   989  000A7E  C019  F019         	movff	strchr@ptr+1,?_strchr+1
   990  000A82  0012               	return	
   991  000A84                     l678:
   992  000A84  C018  FFD9         	movff	strchr@ptr,fsr2l
   993  000A88  C019  FFDA         	movff	strchr@ptr+1,fsr2h
   994  000A8C  4A18               	infsnz	strchr@ptr,f,c
   995  000A8E  2A19               	incf	strchr@ptr+1,f,c
   996  000A90  50DF               	movf	indf2,w,c
   997  000A92  A4D8               	btfss	status,2,c
   998  000A94  D7EA               	goto	_strchr
   999  000A96  0E00               	movlw	0
  1000  000A98  6E18               	movwf	?_strchr,c
  1001  000A9A  0E00               	movlw	0
  1002  000A9C  6E19               	movwf	?_strchr+1,c
  1003  000A9E  0012               	return	
  1004  000AA0                     __end_of_strchr:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           indf2	equ	0xFDF
  1014                           postinc2	equ	0xFDE
  1015                           fsr2h	equ	0xFDA
  1016                           fsr2l	equ	0xFD9
  1017                           status	equ	0xFD8
  1018                           
  1019 ;; *************** function _delay_ms *****************
  1020 ;; Defined at:
  1021 ;;		line 16 in file "delay.h"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  repeat_2        2   23[COMRAM] int 
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1035 ;;      Params:         2       0       0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0       0       0
  1037 ;;      Temps:          1       0       0       0       0       0       0
  1038 ;;      Totals:         3       0       0       0       0       0       0
  1039 ;;Total ram usage:        3 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    1
  1042 ;; This function calls:
  1043 ;;		Nothing
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;;		_delay_s
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text5
  1051  000ACE                     __ptext5:
  1052                           	opt stack 0
  1053  000ACE                     _delay_ms:
  1054                           	opt stack 29
  1055                           
  1056                           ;delay.h: 17: while(repeat_2--){
  1057                           
  1058                           ;incstack = 0
  1059  000ACE  D008               	goto	l37
  1060  000AD0                     l987:
  1061                           
  1062                           ;delay.h: 18: _delay((unsigned long)((1)*(32000000/4000.0)));
  1063  000AD0  0E0B               	movlw	11
  1064  000AD2  6E1A               	movwf	??_delay_ms& (0+255),c
  1065  000AD4  0E62               	movlw	98
  1066  000AD6                     u457:
  1067  000AD6  2EE8               	decfsz	wreg,f,c
  1068  000AD8  D7FE               	bra	u457
  1069  000ADA  2E1A               	decfsz	??_delay_ms& (0+255),f,c
  1070  000ADC  D7FC               	bra	u457
  1071  000ADE  D000               	nop2	
  1072  000AE0                     l37:
  1073  000AE0  0618               	decf	delay_ms@repeat_2,f,c
  1074  000AE2  A0D8               	btfss	status,0,c
  1075  000AE4  0619               	decf	delay_ms@repeat_2+1,f,c
  1076  000AE6  2818               	incf	delay_ms@repeat_2,w,c
  1077  000AE8  E1F3               	bnz	l987
  1078  000AEA  2819               	incf	delay_ms@repeat_2+1,w,c
  1079  000AEC  B4D8               	btfsc	status,2,c
  1080  000AEE  0012               	return	
  1081  000AF0  D7EF               	goto	l38
  1082  000AF2                     __end_of_delay_ms:
  1083                           	opt stack 0
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           indf2	equ	0xFDF
  1093                           postinc2	equ	0xFDE
  1094                           fsr2h	equ	0xFDA
  1095                           fsr2l	equ	0xFD9
  1096                           status	equ	0xFD8
  1097                           
  1098 ;; *************** function _UART_clean_buffer *****************
  1099 ;; Defined at:
  1100 ;;		line 53 in file "uart.h"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  i               2   23[COMRAM] int 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1114 ;;      Params:         0       0       0       0       0       0       0
  1115 ;;      Locals:         2       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0
  1117 ;;      Totals:         2       0       0       0       0       0       0
  1118 ;;Total ram usage:        2 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    1
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text6
  1129  000A32                     __ptext6:
  1130                           	opt stack 0
  1131  000A32                     _UART_clean_buffer:
  1132                           	opt stack 29
  1133                           
  1134                           ;uart.h: 54: int i = 0;
  1135                           
  1136                           ;incstack = 0
  1137  000A32  0E00               	movlw	0
  1138  000A34  6E19               	movwf	UART_clean_buffer@i+1,c
  1139  000A36  0E00               	movlw	0
  1140  000A38  6E18               	movwf	UART_clean_buffer@i,c
  1141                           
  1142                           ;uart.h: 55: for(i=0; i < 32 ; i++)
  1143  000A3A  0E00               	movlw	0
  1144  000A3C  6E19               	movwf	UART_clean_buffer@i+1,c
  1145  000A3E  0E00               	movlw	0
  1146  000A40  6E18               	movwf	UART_clean_buffer@i,c
  1147  000A42                     l817:
  1148  000A42  BE19               	btfsc	UART_clean_buffer@i+1,7,c
  1149  000A44  D006               	goto	l66
  1150  000A46  5019               	movf	UART_clean_buffer@i+1,w,c
  1151  000A48  E10F               	bnz	l68
  1152  000A4A  0E20               	movlw	32
  1153  000A4C  5C18               	subwf	UART_clean_buffer@i,w,c
  1154  000A4E  B0D8               	btfsc	status,0,c
  1155  000A50  0012               	return	
  1156  000A52                     l66:
  1157                           
  1158                           ;uart.h: 56: UART_buffer[i] = "-";
  1159  000A52  0E2B               	movlw	low _UART_buffer
  1160  000A54  2418               	addwf	UART_clean_buffer@i,w,c
  1161  000A56  6ED9               	movwf	fsr2l,c
  1162  000A58  0E00               	movlw	high _UART_buffer
  1163  000A5A  2019               	addwfc	UART_clean_buffer@i+1,w,c
  1164  000A5C  6EDA               	movwf	fsr2h,c
  1165  000A5E  0E2B               	movlw	low STR_1
  1166  000A60  6EDF               	movwf	indf2,c
  1167  000A62  4A18               	infsnz	UART_clean_buffer@i,f,c
  1168  000A64  2A19               	incf	UART_clean_buffer@i+1,f,c
  1169  000A66  D7ED               	goto	l817
  1170  000A68                     l68:
  1171  000A68  0012               	return		;funcret
  1172  000A6A                     __end_of_UART_clean_buffer:
  1173                           	opt stack 0
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function _UART_Write_Text *****************
  1189 ;; Defined at:
  1190 ;;		line 45 in file "uart.h"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  text            2   24[COMRAM] PTR unsigned char 
  1193 ;;		 -> STR_13(7), STR_11(7), STR_9(5), STR_7(5), 
  1194 ;;		 -> STR_5(5), STR_3(5), 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  i               2   28[COMRAM] int 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1206 ;;      Params:         2       0       0       0       0       0       0
  1207 ;;      Locals:         2       0       0       0       0       0       0
  1208 ;;      Temps:          2       0       0       0       0       0       0
  1209 ;;      Totals:         6       0       0       0       0       0       0
  1210 ;;Total ram usage:        6 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    2
  1213 ;; This function calls:
  1214 ;;		_UART_Write_byte
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text7
  1221  0009AA                     __ptext7:
  1222                           	opt stack 0
  1223  0009AA                     _UART_Write_Text:
  1224                           	opt stack 28
  1225                           
  1226                           ;uart.h: 47: int i;
  1227                           ;uart.h: 49: for(i=0;text[i]!='\0';i++)
  1228                           
  1229                           ;incstack = 0
  1230  0009AA  0E00               	movlw	0
  1231  0009AC  6E1E               	movwf	UART_Write_Text@i+1,c
  1232  0009AE  0E00               	movlw	0
  1233  0009B0  6E1D               	movwf	UART_Write_Text@i,c
  1234  0009B2  D010               	goto	l60
  1235  0009B4                     
  1236                           ;uart.h: 50: UART_Write_byte(text[i]);
  1237  0009B4  501D               	movf	UART_Write_Text@i,w,c
  1238  0009B6  2419               	addwf	UART_Write_Text@text,w,c
  1239  0009B8  6E1B               	movwf	??_UART_Write_Text& (0+255),c
  1240  0009BA  501E               	movf	UART_Write_Text@i+1,w,c
  1241  0009BC  201A               	addwfc	UART_Write_Text@text+1,w,c
  1242  0009BE  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1243  0009C0  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
  1244  0009C4  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1245  0009C8                     	if	0	;tblptru may be non-zero
  1246  0009C8                     	endif
  1247  0009C8                     	if	0	;tblptru may be non-zero
  1248  0009C8                     	endif
  1249  0009C8  0008               	tblrd		*
  1250  0009CA  50F5               	movf	tablat,w,c
  1251  0009CC  EC9A  F005         	call	_UART_Write_byte
  1252  0009D0  4A1D               	infsnz	UART_Write_Text@i,f,c
  1253  0009D2  2A1E               	incf	UART_Write_Text@i+1,f,c
  1254  0009D4                     l60:
  1255  0009D4  501D               	movf	UART_Write_Text@i,w,c
  1256  0009D6  2419               	addwf	UART_Write_Text@text,w,c
  1257  0009D8  6E1B               	movwf	??_UART_Write_Text& (0+255),c
  1258  0009DA  501E               	movf	UART_Write_Text@i+1,w,c
  1259  0009DC  201A               	addwfc	UART_Write_Text@text+1,w,c
  1260  0009DE  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
  1261  0009E0  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
  1262  0009E4  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1263  0009E8                     	if	0	;tblptru may be non-zero
  1264  0009E8                     	endif
  1265  0009E8                     	if	0	;tblptru may be non-zero
  1266  0009E8                     	endif
  1267  0009E8  0008               	tblrd		*
  1268  0009EA  50F5               	movf	tablat,w,c
  1269  0009EC  0900               	iorlw	0
  1270  0009EE  B4D8               	btfsc	status,2,c
  1271  0009F0  0012               	return	
  1272  0009F2  D7E0               	goto	l61
  1273  0009F4                     __end_of_UART_Write_Text:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           fsr2h	equ	0xFDA
  1286                           fsr2l	equ	0xFD9
  1287                           status	equ	0xFD8
  1288                           
  1289 ;; *************** function _UART_Write_byte *****************
  1290 ;; Defined at:
  1291 ;;		line 39 in file "uart.h"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  data            1    wreg     unsigned char 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  data            1   23[COMRAM] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1305 ;;      Params:         0       0       0       0       0       0       0
  1306 ;;      Locals:         1       0       0       0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0       0       0
  1308 ;;      Totals:         1       0       0       0       0       0       0
  1309 ;;Total ram usage:        1 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_UART_Write_Text
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text8
  1320  000B34                     __ptext8:
  1321                           	opt stack 0
  1322  000B34                     _UART_Write_byte:
  1323                           	opt stack 28
  1324                           
  1325                           ;incstack = 0
  1326                           ;UART_Write_byte@data stored from wreg
  1327  000B34  6E18               	movwf	UART_Write_byte@data,c
  1328  000B36                     
  1329                           ;uart.h: 41: while(!TRMT);
  1330  000B36  A2AC               	btfss	4012,1,c	;volatile
  1331  000B38  D7FE               	goto	l753
  1332                           
  1333                           ;uart.h: 42: TXREG = data;
  1334  000B3A  C018  FFAD         	movff	UART_Write_byte@data,4013	;volatile
  1335  000B3E  0012               	return		;funcret
  1336  000B40                     __end_of_UART_Write_byte:
  1337                           	opt stack 0
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postdec1	equ	0xFE5
  1345                           fsr1l	equ	0xFE1
  1346                           indf2	equ	0xFDF
  1347                           postinc2	equ	0xFDE
  1348                           fsr2h	equ	0xFDA
  1349                           fsr2l	equ	0xFD9
  1350                           status	equ	0xFD8
  1351                           
  1352 ;; *************** function _UART_Init *****************
  1353 ;; Defined at:
  1354 ;;		line 13 in file "uart.h"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         0       0       0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0
  1371 ;;      Totals:         0       0       0       0       0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text9
  1383  000AF2                     __ptext9:
  1384                           	opt stack 0
  1385  000AF2                     _UART_Init:
  1386                           	opt stack 29
  1387                           
  1388                           ;uart.h: 16: PIE1bits.RCIE = 0b1;
  1389                           
  1390                           ;incstack = 0
  1391  000AF2  8A9D               	bsf	3997,5,c	;volatile
  1392                           
  1393                           ;uart.h: 17: INTCONbits.PEIE = 0b1;
  1394  000AF4  8CF2               	bsf	intcon,6,c	;volatile
  1395                           
  1396                           ;uart.h: 18: INTCONbits.GIE = 0b1;
  1397  000AF6  8EF2               	bsf	intcon,7,c	;volatile
  1398                           
  1399                           ;uart.h: 21: TRISCbits.RC6 = 0b1;
  1400  000AF8  8C94               	bsf	3988,6,c	;volatile
  1401                           
  1402                           ;uart.h: 22: TRISCbits.RC7 = 0b1;
  1403  000AFA  8E94               	bsf	3988,7,c	;volatile
  1404                           
  1405                           ;uart.h: 24: RCSTAbits.SPEN = 0b1;
  1406  000AFC  8EAB               	bsf	4011,7,c	;volatile
  1407                           
  1408                           ;uart.h: 25: RCSTAbits.RX9 = 0b0;
  1409  000AFE  9CAB               	bcf	4011,6,c	;volatile
  1410                           
  1411                           ;uart.h: 26: RCSTAbits.CREN = 0b1;
  1412  000B00  88AB               	bsf	4011,4,c	;volatile
  1413                           
  1414                           ;uart.h: 28: TXSTAbits.TX9 = 0b0;
  1415  000B02  9CAC               	bcf	4012,6,c	;volatile
  1416                           
  1417                           ;uart.h: 29: TXSTAbits.SYNC = 0b0;
  1418  000B04  98AC               	bcf	4012,4,c	;volatile
  1419                           
  1420                           ;uart.h: 30: TXSTAbits.BRGH = 0b0;
  1421  000B06  94AC               	bcf	4012,2,c	;volatile
  1422                           
  1423                           ;uart.h: 31: TXSTAbits.TXEN = 0b1;
  1424  000B08  8AAC               	bsf	4012,5,c	;volatile
  1425                           
  1426                           ;uart.h: 33: BAUDCONbits.BRG16 = 0b0;
  1427  000B0A  96B8               	bcf	4024,3,c	;volatile
  1428                           
  1429                           ;uart.h: 34: BAUDCONbits.ABDEN = 0b0;
  1430  000B0C  90B8               	bcf	4024,0,c	;volatile
  1431                           
  1432                           ;uart.h: 35: SPBRG = 25;
  1433  000B0E  0E19               	movlw	25
  1434  000B10  6EAF               	movwf	4015,c	;volatile
  1435  000B12  0012               	return		;funcret
  1436  000B14                     __end_of_UART_Init:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           intcon	equ	0xFF2
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1l	equ	0xFE1
  1447                           indf2	equ	0xFDF
  1448                           postinc2	equ	0xFDE
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _UART_add_buffer *****************
  1454 ;; Defined at:
  1455 ;;		line 59 in file "uart.h"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  i               2   21[COMRAM] int 
  1460 ;;  byte_rx         1   20[COMRAM] unsigned char 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1470 ;;      Params:         0       0       0       0       0       0       0
  1471 ;;      Locals:         3       0       0       0       0       0       0
  1472 ;;      Temps:         20       0       0       0       0       0       0
  1473 ;;      Totals:        23       0       0       0       0       0       0
  1474 ;;Total ram usage:       23 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		Interrupt level 2
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	intcode
  1484  000008                     __pintcode:
  1485                           	opt stack 0
  1486  000008                     _UART_add_buffer:
  1487                           	opt stack 28
  1488                           
  1489                           ;incstack = 0
  1490  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1491  00000A  EDCC  F003         	call	int_func,f	;refresh shadow registers
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           intcon	equ	0xFF2
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postdec1	equ	0xFE5
  1500                           fsr1l	equ	0xFE1
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507                           	psect	intcode_body
  1508  000798                     __pintcode_body:
  1509                           	opt stack 28
  1510  000798                     int_func:
  1511                           	opt stack 28
  1512  000798  0006               	pop		; remove dummy address from shadow register refresh
  1513  00079A  CFFA F003          	movff	pclath,??_UART_add_buffer+2
  1514  00079E  CFFB F004          	movff	pclatu,??_UART_add_buffer+3
  1515  0007A2  CFE9 F005          	movff	fsr0l,??_UART_add_buffer+4
  1516  0007A6  CFEA F006          	movff	fsr0h,??_UART_add_buffer+5
  1517  0007AA  CFE1 F007          	movff	fsr1l,??_UART_add_buffer+6
  1518  0007AE  CFE2 F008          	movff	fsr1h,??_UART_add_buffer+7
  1519  0007B2  CFD9 F009          	movff	fsr2l,??_UART_add_buffer+8
  1520  0007B6  CFDA F00A          	movff	fsr2h,??_UART_add_buffer+9
  1521  0007BA  CFF3 F00B          	movff	prodl,??_UART_add_buffer+10
  1522  0007BE  CFF4 F00C          	movff	prodh,??_UART_add_buffer+11
  1523  0007C2  CFF6 F00D          	movff	tblptrl,??_UART_add_buffer+12
  1524  0007C6  CFF7 F00E          	movff	tblptrh,??_UART_add_buffer+13
  1525  0007CA  CFF8 F00F          	movff	tblptru,??_UART_add_buffer+14
  1526  0007CE  CFF5 F010          	movff	tablat,??_UART_add_buffer+15
  1527  0007D2  C04B  F011         	movff	btemp,??_UART_add_buffer+16
  1528  0007D6  C04C  F012         	movff	btemp+1,??_UART_add_buffer+17
  1529  0007DA  C04D  F013         	movff	btemp+2,??_UART_add_buffer+18
  1530  0007DE  C04E  F014         	movff	btemp+3,??_UART_add_buffer+19
  1531                           
  1532                           ;uart.h: 61: int i = 0;
  1533  0007E2  0E00               	movlw	0
  1534  0007E4  6E17               	movwf	UART_add_buffer@i+1,c
  1535  0007E6  0E00               	movlw	0
  1536  0007E8  6E16               	movwf	UART_add_buffer@i,c
  1537                           
  1538                           ;uart.h: 62: char byte_rx = RCREG;
  1539  0007EA  CFAE F015          	movff	4014,UART_add_buffer@byte_rx	;volatile
  1540                           
  1541                           ;uart.h: 63: PORTB=0x00;
  1542  0007EE  0E00               	movlw	0
  1543  0007F0  6E81               	movwf	3969,c	;volatile
  1544                           
  1545                           ;uart.h: 65: if ((byte_rx != '\r') && (byte_rx != '\n')) {
  1546  0007F2  0E0D               	movlw	13
  1547  0007F4  1815               	xorwf	UART_add_buffer@byte_rx,w,c
  1548  0007F6  B4D8               	btfsc	status,2,c
  1549  0007F8  D02D               	goto	i2l73
  1550  0007FA  0E0A               	movlw	10
  1551  0007FC  1815               	xorwf	UART_add_buffer@byte_rx,w,c
  1552  0007FE  B4D8               	btfsc	status,2,c
  1553  000800  D029               	goto	i2l73
  1554                           
  1555                           ;uart.h: 66: for(i=0; i < 32-1; i++){
  1556  000802  0E00               	movlw	0
  1557  000804  6E17               	movwf	UART_add_buffer@i+1,c
  1558  000806  0E00               	movlw	0
  1559  000808  6E16               	movwf	UART_add_buffer@i,c
  1560  00080A  BE17               	btfsc	UART_add_buffer@i+1,7,c
  1561  00080C  D003               	goto	i2l74
  1562  00080E  5017               	movf	UART_add_buffer@i+1,w,c
  1563  000810  E11F               	bnz	i2l75
  1564  000812  D01A               	goto	L2
  1565  000814                     i2l74:
  1566                           
  1567                           ;uart.h: 67: UART_buffer[i]=UART_buffer[i+1];
  1568  000814  0E01               	movlw	1
  1569  000816  2416               	addwf	UART_add_buffer@i,w,c
  1570  000818  6E01               	movwf	??_UART_add_buffer& (0+255),c
  1571  00081A  0E00               	movlw	0
  1572  00081C  2017               	addwfc	UART_add_buffer@i+1,w,c
  1573  00081E  6E02               	movwf	(??_UART_add_buffer+1)& (0+255),c
  1574  000820  0E2B               	movlw	low _UART_buffer
  1575  000822  2401               	addwf	??_UART_add_buffer,w,c
  1576  000824  6ED9               	movwf	fsr2l,c
  1577  000826  0E00               	movlw	high _UART_buffer
  1578  000828  2002               	addwfc	??_UART_add_buffer+1,w,c
  1579  00082A  6EDA               	movwf	fsr2h,c
  1580  00082C  0E2B               	movlw	low _UART_buffer
  1581  00082E  2416               	addwf	UART_add_buffer@i,w,c
  1582  000830  6EE1               	movwf	fsr1l,c
  1583  000832  0E00               	movlw	high _UART_buffer
  1584  000834  2017               	addwfc	UART_add_buffer@i+1,w,c
  1585  000836  6EE2               	movwf	fsr1h,c
  1586  000838  CFDF FFE7          	movff	indf2,indf1
  1587  00083C  4A16               	infsnz	UART_add_buffer@i,f,c
  1588  00083E  2A17               	incf	UART_add_buffer@i+1,f,c
  1589  000840  BE17               	btfsc	UART_add_buffer@i+1,7,c
  1590  000842  D7E8               	goto	i2l74
  1591  000844  5017               	movf	UART_add_buffer@i+1,w,c
  1592  000846  E104               	bnz	i2u20_40
  1593  000848                     L2:
  1594  000848  0E1F               	movlw	31
  1595  00084A  5C16               	subwf	UART_add_buffer@i,w,c
  1596  00084C  A0D8               	btfss	status,0,c
  1597  00084E  D7E2               	goto	i2l74
  1598  000850                     i2u20_40:
  1599  000850                     i2l75:
  1600                           
  1601                           ;uart.h: 68: }
  1602                           ;uart.h: 69: UART_buffer[32-1] = byte_rx;
  1603  000850  C015  F04A         	movff	UART_add_buffer@byte_rx,_UART_buffer+31
  1604  000854                     i2l73:
  1605                           
  1606                           ;uart.h: 70: }
  1607                           ;uart.h: 71: PORTB=0x0F;
  1608  000854  0E0F               	movlw	15
  1609  000856  6E81               	movwf	3969,c	;volatile
  1610  000858  C014  F04E         	movff	??_UART_add_buffer+19,btemp+3
  1611  00085C  C013  F04D         	movff	??_UART_add_buffer+18,btemp+2
  1612  000860  C012  F04C         	movff	??_UART_add_buffer+17,btemp+1
  1613  000864  C011  F04B         	movff	??_UART_add_buffer+16,btemp
  1614  000868  C010  FFF5         	movff	??_UART_add_buffer+15,tablat
  1615  00086C  C00F  FFF8         	movff	??_UART_add_buffer+14,tblptru
  1616  000870  C00E  FFF7         	movff	??_UART_add_buffer+13,tblptrh
  1617  000874  C00D  FFF6         	movff	??_UART_add_buffer+12,tblptrl
  1618  000878  C00C  FFF4         	movff	??_UART_add_buffer+11,prodh
  1619  00087C  C00B  FFF3         	movff	??_UART_add_buffer+10,prodl
  1620  000880  C00A  FFDA         	movff	??_UART_add_buffer+9,fsr2h
  1621  000884  C009  FFD9         	movff	??_UART_add_buffer+8,fsr2l
  1622  000888  C008  FFE2         	movff	??_UART_add_buffer+7,fsr1h
  1623  00088C  C007  FFE1         	movff	??_UART_add_buffer+6,fsr1l
  1624  000890  C006  FFEA         	movff	??_UART_add_buffer+5,fsr0h
  1625  000894  C005  FFE9         	movff	??_UART_add_buffer+4,fsr0l
  1626  000898  C004  FFFB         	movff	??_UART_add_buffer+3,pclatu
  1627  00089C  C003  FFFA         	movff	??_UART_add_buffer+2,pclath
  1628  0008A0  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1629  0008A2  0011               	retfie		f
  1630  0008A4                     __end_of_UART_add_buffer:
  1631                           	opt stack 0
  1632                           pclatu	equ	0xFFB
  1633                           pclath	equ	0xFFA
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           prodh	equ	0xFF4
  1639                           prodl	equ	0xFF3
  1640                           intcon	equ	0xFF2
  1641                           postinc0	equ	0xFEE
  1642                           fsr0h	equ	0xFEA
  1643                           fsr0l	equ	0xFE9
  1644                           wreg	equ	0xFE8
  1645                           indf1	equ	0xFE7
  1646                           postdec1	equ	0xFE5
  1647                           fsr1h	equ	0xFE2
  1648                           fsr1l	equ	0xFE1
  1649                           indf2	equ	0xFDF
  1650                           postinc2	equ	0xFDE
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           pclatu	equ	0xFFB
  1655                           pclath	equ	0xFFA
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon	equ	0xFF2
  1663                           postinc0	equ	0xFEE
  1664                           fsr0h	equ	0xFEA
  1665                           fsr0l	equ	0xFE9
  1666                           wreg	equ	0xFE8
  1667                           indf1	equ	0xFE7
  1668                           postdec1	equ	0xFE5
  1669                           fsr1h	equ	0xFE2
  1670                           fsr1l	equ	0xFE1
  1671                           indf2	equ	0xFDF
  1672                           postinc2	equ	0xFDE
  1673                           fsr2h	equ	0xFDA
  1674                           fsr2l	equ	0xFD9
  1675                           status	equ	0xFD8
  1676                           
  1677                           	psect	rparam
  1678  0000                     pclatu	equ	0xFFB
  1679                           pclath	equ	0xFFA
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           prodh	equ	0xFF4
  1685                           prodl	equ	0xFF3
  1686                           intcon	equ	0xFF2
  1687                           postinc0	equ	0xFEE
  1688                           fsr0h	equ	0xFEA
  1689                           fsr0l	equ	0xFE9
  1690                           wreg	equ	0xFE8
  1691                           indf1	equ	0xFE7
  1692                           postdec1	equ	0xFE5
  1693                           fsr1h	equ	0xFE2
  1694                           fsr1l	equ	0xFE1
  1695                           indf2	equ	0xFDF
  1696                           postinc2	equ	0xFDE
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701                           	psect	temp
  1702  00004B                     btemp:
  1703                           	opt stack 0
  1704  00004B                     	ds	1
  1705  0000                     int$flags	set	btemp
  1706  0000                     wtemp6	set	btemp+1
  1707                           pclatu	equ	0xFFB
  1708                           pclath	equ	0xFFA
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           prodh	equ	0xFF4
  1714                           prodl	equ	0xFF3
  1715                           intcon	equ	0xFF2
  1716                           postinc0	equ	0xFEE
  1717                           fsr0h	equ	0xFEA
  1718                           fsr0l	equ	0xFE9
  1719                           wreg	equ	0xFE8
  1720                           indf1	equ	0xFE7
  1721                           postdec1	equ	0xFE5
  1722                           fsr1h	equ	0xFE2
  1723                           fsr1l	equ	0xFE1
  1724                           indf2	equ	0xFDF
  1725                           postinc2	equ	0xFDE
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    0
    Data        32
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     42      74
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_10(CODE[4]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_2(CODE[2]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), UART_buffer(COMRAM[32]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_10(CODE[4]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_2(CODE[2]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_10(CODE[4]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_2(CODE[2]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), UART_buffer(COMRAM[32]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), UART_buffer(COMRAM[32]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), STR_10(CODE[4]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_4(CODE[2]), STR_2(CODE[2]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), UART_buffer(COMRAM[32]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), UART_buffer(COMRAM[32]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 7
		 -> STR_13(CODE[7]), STR_11(CODE[7]), STR_9(CODE[5]), STR_7(CODE[5]), 
		 -> STR_5(CODE[5]), STR_3(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _UART_Write_Text->_UART_Write_byte

Critical Paths under _UART_add_buffer in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _UART_add_buffer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_add_buffer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART_add_buffer in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART_add_buffer in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _UART_add_buffer in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _UART_add_buffer in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2789
                          _UART_Init
                    _UART_Write_Text
                  _UART_clean_buffer
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               4     0      4    1857
                                             38 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     3      6     362
                                             29 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             23 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               5     1      4     240
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2     326
                                             23 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _UART_clean_buffer                                    2     2      0      45
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      6     4      2     561
                                             24 COMRAM     6     4      2
                    _UART_Write_byte
 ---------------------------------------------------------------------------------
 (2) _UART_Write_byte                                      1     1      0      15
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _UART_add_buffer                                     23    23      0     105
                                              0 COMRAM    23    23      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
   _UART_Write_Text
     _UART_Write_byte
   _UART_clean_buffer
   _delay_ms
   _strstr
     _strchr
     _strlen
     _strncmp
       _strlen (ARG)

 _UART_add_buffer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2A      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      15        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 11 20:58:50 2018

                        l60 09D4                          l61 09B4                          l37 0AE0  
                        l38 0AD0                          l81 067A                          l66 0A52  
                        l90 076A                          l82 06AA                          l68 0A68  
                        l84 06DA                          l86 070A                          l88 073A  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_LVP$ON 000000  
                       l650 08A6                         l651 08E0                         l753 0B36  
                       l817 0A42                         l649 0908                         l690 092A  
                       l683 0A02                         l691 0988                         l684 09FE  
                       l678 0A84                         l689 0990                         l957 092A  
                       l987 0AD0                __CFG_CPB$OFF 000000                         u290 0956  
                       u370 091E                __CFG_CPD$OFF 000000                         u457 0AD6  
                       wreg 000FE8           _UART_clean_buffer 0A32                __CFG_WDT$OFF 000000  
                      STR_1 062B                        STR_2 062D                        STR_3 060F  
                      STR_4 062F                        STR_5 0614                        STR_6 0631  
                      STR_7 0619                        STR_8 0633                        STR_9 061E  
                      i2l73 0854                        i2l74 0814                        i2l75 0850  
                      _TRMT 007D61          ?_UART_clean_buffer 0001                        _main 0636  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr2h 000FDA  
                      fsr0l 000FE9                        indf1 000FE7                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 004B  
                      prodh 000FF4                        prodl 000FF3                        start 000E  
             __CFG_IESO$OFF 000000         ??_UART_clean_buffer 0018                ___param_bank 000000  
   __end_of_UART_add_buffer 08A4     __end_of_UART_Write_Text 09F4     __end_of_UART_Write_byte 0B40  
                     ?_main 0001                       STR_10 0627                       STR_11 0608  
                     STR_12 0623                       STR_13 0601                       _RCREG 000FAE  
                     _SPBRG 000FAF                       _PORTB 000F81                       _TRISB 000F93  
                     _TXREG 000FAD               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
 __end_of_UART_clean_buffer 0A6A              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
        __size_of_UART_Init 0022               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000                       pclath 000FFA  
                     tablat 000FF5                       status 000FD8                       wtemp6 004C  
           __end_of_strncmp 09AA              __CFG_MCLRE$OFF 000000             __initialization 0AA0  
              __end_of_main 0798              __CFG_OSC$HSPLL 000000                      ??_main 002B  
             __activetblptr 000002            __end_of_delay_ms 0AF2              __CFG_XINST$OFF 000000  
         __end_of_UART_Init 0B14            ?_UART_add_buffer 0001              __CFG_STVREN$ON 000000  
          ?_UART_Write_Text 0019            ?_UART_Write_byte 0001                      _strchr 0A6A  
                    _strlen 09F4                      _strstr 08A4                __pdataCOMRAM 002B  
              __mediumconst 0000  __size_of_UART_clean_buffer 0038                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_strncmp 0024  
                __accesstop 0080     __end_of__initialization 0AC0             __CFG_PBADEN$OFF 000000  
             ___rparam_used 000001              __pcstackCOMRAM 0001                     ?_strchr 0018  
                   ?_strlen 0018                     ?_strstr 0027                   ?_delay_ms 0018  
                   i2u20_40 0850            delay_ms@repeat_2 0018                     __Hparam 0000  
                   __Lparam 0000                __psmallconst 0600                     __pcinit 0AA0  
                   __ramtop 0600                     __ptext0 0636                     __ptext1 08A4  
                   __ptext2 0928                     __ptext3 09F4                     __ptext4 0A6A  
                   __ptext5 0ACE                     __ptext6 0A32                     __ptext7 09AA  
                   __ptext8 0B34                     __ptext9 0AF2             __size_of_strchr 0036  
           __size_of_strlen 003E             __size_of_strstr 0084                  ??_delay_ms 001A  
                   _strncmp 0928              __pintcode_body 0798        end_of_initialization 0AC0  
             __Lmediumconst 0000                     int_func 0798      UART_add_buffer@byte_rx 0015  
                 _RCSTAbits 000FAB                     postdec1 000FE5                     postinc0 000FEE  
                   postinc2 000FDE                     strlen@s 0018                   _UART_Init 0AF2  
                 _TRISCbits 000F94                   _TXSTAbits 000FAC                 _BAUDCONbits 000FB8  
                ?_UART_Init 0001               __pidataCOMRAM 0B14    __size_of_UART_add_buffer 089C  
  __size_of_UART_Write_Text 004A              __end_of_strchr 0AA0              __end_of_strlen 0A32  
            __end_of_strstr 0928         start_initialization 0AA0    __size_of_UART_Write_byte 000C  
          __CFG_LPT1OSC$OFF 000000                    ??_strchr 001C                    ??_strlen 001A  
                  ??_strstr 002B           __size_of_delay_ms 0024           __CFG_CCP2MX$PORTC 000000  
                 __pintcode 0008                 ??_UART_Init 0018                 __smallconst 0600  
                  ?_strncmp 001E           ??_UART_add_buffer 0001           ??_UART_Write_Text 001B  
         ??_UART_Write_byte 0018                    _PIE1bits 000F9D            __CFG_WDTPS$32768 000000  
                 copy_data0 0AB4                    __Hrparam 0000                    __Lrparam 0000  
        UART_clean_buffer@i 0018          __CFG_BOREN$SBORDIS 000000                    _delay_ms 0ACE  
          __size_of_strncmp 0082         UART_Write_Text@text 0019               __size_of_main 0162  
                strncmp@len 0022                    int$flags 004B                  _INTCONbits 000FF2  
                  intlevel2 0000                   strchr@chr 001A                   strchr@ptr 0018  
                 strncmp@s1 001E                   strncmp@s2 0020         UART_Write_byte@data 0018  
               _UART_buffer 002B             _UART_add_buffer 0008             _UART_Write_Text 09AA  
           _UART_Write_byte 0B34                    strlen@cp 001C                    strstr@s1 0027  
                  strstr@s2 0029            UART_add_buffer@i 0016            UART_Write_Text@i 001D  
